name: .NET

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: "Checkout"
      uses: actions/checkout@v2
      
    - name: "Setup .NET"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: "Restore dependencies"
      run: dotnet restore
      
    - name: "Build"
      run: dotnet build --no-restore --configuration Release
      
    - name: "Set Username Secret"
      run: dotnet user-secrets set "PDGA:UserName" "${{secrets.PDGAUserName}}" --project "${{ github.workspace }}/PDGAApi.Net.Tests/PDGAApi.Net.Tests.csproj"
      
    - name: "Set Password Secret"
      run: dotnet user-secrets set "PDGA:Password" "${{secrets.PDGAPassword}}" --project "${{ github.workspace }}/PDGAApi.Net.Tests/PDGAApi.Net.Tests.csproj"
      
    - name: "Test"
      run: dotnet test --no-restore --verbosity normal
      
    - name: "Pack"
      run: dotnet pack --configuration Release
      
    #- name: "Publish On Version Change"
    #  id: publish_nuget
    #  uses: rohith/publish-nuget@v2
    #  with:
    #    # Filepath of the project to be packaged, relative to root of repository
    #    PROJECT_FILE_PATH: PDGAApi.Net/PDGAApi.Net.csproj
    #
    #    # NuGet package id, used for version detection & defaults to project name
    #    PACKAGE_NAME: PDGAApi.Net
    #
    #    # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
    #    # VERSION_FILE_PATH: Directory.Build.props
    #
    #    # Regex pattern to extract version info in a capturing group
    #    # VERSION_REGEX: ^\s*<Version>(.*)<\/Version>\s*$
    #
    #    # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
    #    # VERSION_STATIC: 1.0.0
    #
    #    # Flag to toggle git tagging, enabled by default
    #    # TAG_COMMIT: true
    #
    #    # Format of the git tag, [*] gets replaced with actual version
    #    # TAG_FORMAT: v*
    #
    #    # API key to authenticate with NuGet server
    #    NUGET_KEY: ${{secrets.NUGET_API_KEY}}
    #
    #    # NuGet server uri hosting the packages, defaults to https://api.nuget.org
    #    NUGET_SOURCE: https://api.nuget.org/v3/index.json
    #
    #    # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
    #    # INCLUDE_SYMBOLS: false
    
    - name: Publish NuGet
      # You may pin to the exact commit or the version.
      # uses: brandedoutcast/publish-nuget@c12b8546b67672ee38ac87bea491ac94a587f7cc
      uses: brandedoutcast/publish-nuget@v2.5.5
      with:
        # Filepath of the project to be packaged, relative to root of repository
        PROJECT_FILE_PATH: PDGAApi.Net/PDGAApi.Net.csproj
        # NuGet package id, used for version detection & defaults to project name
        PACKAGE_NAME: PDGAApi.Net
        # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
        #VERSION_FILE_PATH: # optional
        # Regex pattern to extract version info in a capturing group
        #VERSION_REGEX: # optional, default is ^\s*<Version>(.*)<\/Version>\s*$
        # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
        #VERSION_STATIC: # optional
        # Flag to toggle git tagging, enabled by default
        #TAG_COMMIT: # optional, default is true
        # Format of the git tag, [*] gets replaced with actual version
        #TAG_FORMAT: # optional, default is v*
        # API key to authenticate with NuGet server
        NUGET_KEY: ${{secrets.NUGET_API_KEY}}
        # NuGet server uri hosting the packages, defaults to https://api.nuget.org
        NUGET_SOURCE: https://api.nuget.org/v3/index.json
        # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
        #INCLUDE_SYMBOLS: # optional
        
    #- name: Upload Artifacts
    #  uses: actions/upload-artifact@v1.0.0
    #  with:
    #     name: nupkgs
    #     path: ${{ github.workspace }}/artifacts/pkg/
         
    #- name: "Nuget Push"
    #  run: dotnet nuget push .\PDGAApi.Net\bin\Release\PDGAApi.Net.1.0.0.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
